/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package visao;

import dao.CadastrarCategoriaDao;
import dao.CadastrarProdutoDao;
import modelo.CadastrarProduto;
import modelo.CadastrarCategoria;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;

/**
 *
 * @author luiz
 */
public class FrmCadastrarProd extends javax.swing.JFrame {

    private CadastrarProduto objetoCadastrarProduto;

    public FrmCadastrarProd() {
        initComponents();
        carregarCategoriasNoCombo();
        setLocationRelativeTo(null);

    }
//função para a carregar as categorias no combobox

    private void carregarCategoriasNoCombo() {
        jComboCategoria.removeAllItems();
        CadastrarCategoriaDao dao = new CadastrarCategoriaDao();
        for (String nomeCategoria : dao.getNomesCategorias()) {
            jComboCategoria.addItem(nomeCategoria);
        }
    }
//função para a tabela ser atualizada

    public void carregaTabela() {
        DefaultTableModel modelo = (DefaultTableModel) this.JTableProdutos.getModel();
        modelo.setNumRows(0);

        CadastrarProdutoDao dao = new CadastrarProdutoDao();
        for (CadastrarProduto produto : dao.getListaProdutos()) {
            modelo.addRow(new Object[]{
                produto.getId(),
                produto.getNome(),
                produto.getPreco(),
                produto.getQuantidade(),
                produto.getMin(),
                produto.getMax(),
                produto.getUnidade(),
                produto.getCategoria().getNome()
            });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextPreco = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextQuantidade_min = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextNome = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextQuantidade = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextQuantidade_max = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jComboCategoria = new javax.swing.JComboBox<>();
        jButtonCadastrar = new javax.swing.JButton();
        jButtonEditar = new javax.swing.JButton();
        jButtonExcluir = new javax.swing.JButton();
        jComboUnidade = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTableProdutos = new javax.swing.JTable();
        jButtonExcluir1 = new javax.swing.JButton();
        jButtonListar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cadastrar Produto");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Cadastrar Produto");

        jLabel1.setText("Inserir ID do Produto");

        jTextId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextIdActionPerformed(evt);
            }
        });

        jLabel2.setText("Inserir preço do Produto");

        jLabel4.setText("Inserir quantidade minima do Produto em estoque");

        jLabel5.setText("Inserir unidade de medida do Produto ");

        jLabel6.setText("Inserir Nome do Produto");

        jLabel7.setText("Inserir quantidade do Produto em estoque");

        jLabel8.setText("Inserir quantidade maxima do Produto em estoque");

        jLabel9.setText("Inserir Categoria do Produto");

        jComboCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboCategoriaActionPerformed(evt);
            }
        });

        jButtonCadastrar.setText("Cadastrar");
        jButtonCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCadastrarActionPerformed(evt);
            }
        });

        jButtonEditar.setText("Editar");
        jButtonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarActionPerformed(evt);
            }
        });

        jButtonExcluir.setText("Excluir");
        jButtonExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluirActionPerformed(evt);
            }
        });

        jComboUnidade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "kg (quilograma)", "g (grama)", "mL (mililitro)", "L (litro)", "cm (centímetro)", "m (metro)", "un (unidade)", "dz (dúzia)", "par (par)" }));

        JTableProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Nome", "Valor", "Quant. atual", "Quant. min.", "Quant. max.", "Unidade", "Categoria"
            }
        ));
        JTableProdutos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTableProdutosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(JTableProdutos);

        jButtonExcluir1.setText("Sair");
        jButtonExcluir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluir1ActionPerformed(evt);
            }
        });

        jButtonListar.setText("Listar");
        jButtonListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTextQuantidade_min, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextPreco, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextId, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboUnidade, 0, 400, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTextQuantidade, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextQuantidade_max, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboCategoria, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextNome, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonCadastrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonExcluir1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonListar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(34, 34, 34))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel3)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextQuantidade_max, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonCadastrar)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonEditar)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonExcluir)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonListar)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonExcluir1))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextPreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextQuantidade_min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboUnidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(49, 49, 49)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboCategoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboCategoriaActionPerformed

    private void jTextIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextIdActionPerformed

    private void jButtonCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCadastrarActionPerformed
        try {
            //id e nome, pegar nome e id
            String nome = jTextNome.getText().trim();
            int id;

            if (nome.length() < 2) {
                throw new Mensagem("O nome deve conter ao menos 2 caracteres.");
            }

            if (jTextId.getText().trim().isEmpty()) {
                throw new Mensagem("ID não pode estar vazio.");
            }

            try {
                id = Integer.parseInt(jTextId.getText().trim());
                if (id < 0) {
                    throw new Mensagem("ID deve ser maior que zero.");

                }
                ArrayList<CadastrarProduto> produtos = new CadastrarProdutoDao().getListaProdutos();
                for (CadastrarProduto produto : produtos) {
                    if (produto.getId() == id) {
                        throw new Mensagem("ID " + id + " já cadastrado");
                    }
                    if (produto.getNome().equals(nome)) {
                        throw new Mensagem("Nome " + nome + " já cadastrado");
                    }
                }
            } catch (NumberFormatException e) {
                throw new Mensagem("ID deve ser um número válido.");
            }
            //preço, aqui vai fazer teste com o preço onde ele não pode ser menor igual a zero
            double preco;
            try {
                preco = Double.parseDouble(jTextPreco.getText().trim());
                if (preco <= 0) {
                    throw new Mensagem("Valor invalido, o valor não pode ser igual a 0");
                }
            } catch (NumberFormatException e) {
                throw new Mensagem("Preço invalido");

            }
            //quantidade,min e max, aqui vai fazer teste com essas variaveis, nenhuma delas pode ser zero, e o valor minimo não pode ser superior ao valor maximo
            //a quantidade pode ser qualquer valor pois o estoque pode estar zerado por exemplo, ai isso irá aparecer quando o usuario fazer o filtro em outra janela
            int quantidade;
            int min;
            int max;
            try {
                quantidade = Integer.parseInt(jTextQuantidade.getText().trim());
                min = Integer.parseInt(jTextQuantidade_min.getText().trim());
                max = Integer.parseInt(jTextQuantidade_max.getText().trim());
                if (min <= 0 || max <= 0) {
                    throw new Mensagem("Quantidades não podem ser nulas");
                }
                if (min > max) {
                    throw new Mensagem("Quantidades Minima não pode ser superior a quantidade maxima");
                }
            } catch (NumberFormatException e) {
                throw new Mensagem("Campos de quantidade invalidos");

            }
            // unidade, já que eu coloquei valores fixos a strign unidade vai pegar um daqueles valores

            String unidade = jComboUnidade.getSelectedItem().toString();
            //Categoria
            if (jComboCategoria.getSelectedItem() == null) {
                throw new Mensagem("Selecione categoria.");
            }

            String nomeCategoria = jComboCategoria.getSelectedItem().toString();
            CadastrarCategoria categoriaSelecionada = null;

            CadastrarCategoriaDao categoriaDao = new CadastrarCategoriaDao();
            for (CadastrarCategoria cat : categoriaDao.getLista()) {
                if (cat.getNome().equals(nomeCategoria)) {
                    categoriaSelecionada = cat;
                    break;
                }
            }

            if (categoriaSelecionada == null) {
                throw new Mensagem("Categoria não encontrada!");
            }

            this.objetoCadastrarProduto = new CadastrarProduto();
            this.objetoCadastrarProduto.setId(id);
            this.objetoCadastrarProduto.setNome(nome);
            this.objetoCadastrarProduto.setPreco(preco);
            this.objetoCadastrarProduto.setQuantidade(quantidade);
            this.objetoCadastrarProduto.setMin(min);
            this.objetoCadastrarProduto.setMax(max);
            this.objetoCadastrarProduto.setUnidade(unidade.trim());
            this.objetoCadastrarProduto.setCategoria(categoriaSelecionada);
            if (categoriaSelecionada == null) {
                throw new Mensagem("Categoria não encontrada!");
            }
            CadastrarProdutoDao produtoDao = new CadastrarProdutoDao();
            if (produtoDao.inserirProduto(this.objetoCadastrarProduto)) {
                jTextId.setText("");
                jTextNome.setText("");
                jTextPreco.setText("");
                jTextQuantidade.setText("");
                jTextQuantidade_min.setText("");
                jTextQuantidade_max.setText("");
                jComboUnidade.setSelectedIndex(-1);
                jComboCategoria.setSelectedIndex(-1);
                carregaTabela();

                JOptionPane.showMessageDialog(null, "Produto cadastrado com sucesso!");

            }

        } catch (Mensagem erro) {
            JOptionPane.showMessageDialog(null, erro.getMessage());
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jButtonCadastrarActionPerformed

    private void jButtonExcluir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluir1ActionPerformed
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonExcluir1ActionPerformed

    private void jButtonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarActionPerformed

        try {
            if (this.JTableProdutos.getSelectedRow() == -1) {
                throw new Mensagem("selecione um produto para editar");
            }
            //Pegar valor que quero editar

            int id = Integer.parseInt(this.JTableProdutos.getValueAt(this.JTableProdutos.getSelectedRow(), 0).toString());
            String nome = jTextNome.getText().trim();
            //aqui basicamente eu faço as comparações novamente, pq o usuario vai poder digitar tudo novamente (menos o ID)
            if (nome.length() < 2) {
                throw new Mensagem("O nome deve conter ao menos 2 caracteres.");
            }

            double preco = Double.parseDouble(jTextPreco.getText().trim());
            if (preco <= 0) {
                throw new Mensagem("Valor inválido, o preço não pode ser menor ou igual a zero");
            }

            int quantidade = Integer.parseInt(jTextQuantidade.getText().trim());
            int min = Integer.parseInt(jTextQuantidade_min.getText().trim());
            int max = Integer.parseInt(jTextQuantidade_max.getText().trim());

            if (min <= 0 || max <= 0 || quantidade < 0) {
                throw new Mensagem("Quantidades não podem ser negativas ou zero");
            }

            if (min > max) {
                throw new Mensagem("Quantidade mínima não pode ser maior que a máxima");
            }

            String unidade = jComboUnidade.getSelectedItem().toString();

            if (jComboCategoria.getSelectedItem() == null) {
                throw new Mensagem("Selecione uma categoria.");
            }

            String nomeCategoria = jComboCategoria.getSelectedItem().toString();
            CadastrarCategoria categoriaSelecionada = null;

            CadastrarCategoriaDao categoriaDao = new CadastrarCategoriaDao();
            for (CadastrarCategoria cat : categoriaDao.getLista()) {
                if (cat.getNome().equals(nomeCategoria)) {
                    categoriaSelecionada = cat;
                    break;
                }
            }

            if (categoriaSelecionada == null) {
                throw new Mensagem("Categoria selecionada não encontrada!");
            }
            //atualizar e limpar os campos

            CadastrarProduto produtoAtualizado = new CadastrarProduto(id, nome, preco, quantidade, min, max, unidade, categoriaSelecionada);

            CadastrarProdutoDao produtoDao = new CadastrarProdutoDao();
            if (produtoDao.atualizarProduto(produtoAtualizado)) {
                jTextId.setText("");
                jTextNome.setText("");
                jTextPreco.setText("");
                jTextQuantidade.setText("");
                jTextQuantidade_min.setText("");
                jTextQuantidade_max.setText("");
                jComboUnidade.setSelectedIndex(-1);
                jComboCategoria.setSelectedIndex(-1);
                JOptionPane.showMessageDialog(rootPane, "Produto Alterado com Sucesso!");
            }

        } catch (Mensagem erro) {
            JOptionPane.showMessageDialog(null, erro.getMessage());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Informe um valor válido.");
        } finally {
            carregaTabela();
        }
// TODO add your handling code here:
    }//GEN-LAST:event_jButtonEditarActionPerformed

    private void JTableProdutosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTableProdutosMouseClicked
        //usuario pode clicar na tabela e puxar os valores que quiser, igual exemplo do professor

        if (this.JTableProdutos.getSelectedRow() != -1) {
            String id = this.JTableProdutos.getValueAt(this.JTableProdutos.getSelectedRow(), 0).toString();
            String nome = this.JTableProdutos.getValueAt(this.JTableProdutos.getSelectedRow(), 1).toString();
            String preco = this.JTableProdutos.getValueAt(this.JTableProdutos.getSelectedRow(), 2).toString();
            String quantidade = this.JTableProdutos.getValueAt(this.JTableProdutos.getSelectedRow(), 3).toString();
            String min = this.JTableProdutos.getValueAt(this.JTableProdutos.getSelectedRow(), 4).toString();
            String max = this.JTableProdutos.getValueAt(this.JTableProdutos.getSelectedRow(), 5).toString();
            String unidade = this.JTableProdutos.getValueAt(this.JTableProdutos.getSelectedRow(), 6).toString();
            String categoria = this.JTableProdutos.getValueAt(this.JTableProdutos.getSelectedRow(), 7).toString();
            this.jTextId.setText(id);
            this.jTextNome.setText(nome);
            this.jTextPreco.setText(preco);
            this.jTextQuantidade.setText(quantidade);
            this.jTextQuantidade_min.setText(min);
            this.jTextQuantidade_max.setText(max);
            this.jComboUnidade.setSelectedItem(unidade);
            this.jComboCategoria.setSelectedItem(categoria);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_JTableProdutosMouseClicked

    private void jButtonListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListarActionPerformed
        //se o usuario fechar a janela e voltar para ela novamente os valores da tavela não aparecem, se abertar em listar eles voltam a aparecer

        carregaTabela();

        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonListarActionPerformed

    private void jButtonExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluirActionPerformed
        try {

            int id = 0;
            if (this.JTableProdutos.getSelectedRow() == -1) {
                throw new Mensagem("Primeiro selecione uma categoria para remover");
            } else {
                id = Integer.parseInt(this.JTableProdutos
                        .getValueAt(this.JTableProdutos.getSelectedRow(), 0)
                        .toString());
            }

            int respostaUsuario = JOptionPane.showConfirmDialog(
                    null,
                    "Tem certeza que deseja remover esta categoria?",
                    "Confirmação",
                    JOptionPane.YES_NO_OPTION
            );

            if (respostaUsuario == JOptionPane.YES_OPTION) {
                CadastrarProdutoDao produtoDao = new CadastrarProdutoDao();
                if (produtoDao.removerProduto(id)) {
                    // Limpa os campos após remoção

                    this.jTextId.setText("");
                    this.jTextNome.setText("");
                    this.jTextPreco.setText("");
                    this.jTextQuantidade.setText("");
                    this.jTextQuantidade_min.setText("");
                    this.jTextQuantidade_max.setText("");
                    this.jComboUnidade.setSelectedIndex(-1);
                    this.jComboCategoria.setSelectedIndex(-1);

                    JOptionPane.showMessageDialog(
                            rootPane,
                            "Categoria removida com sucesso!"
                    );
                }
            }

            CadastrarProdutoDao produtoDao = new CadastrarProdutoDao();
            System.out.println(produtoDao.getListaProdutos().toString());

        } catch (Mensagem erro) {
            JOptionPane.showMessageDialog(null, erro.getMessage());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "ID inválido");
        } finally {
            carregaTabela();
        }// TODO add your handling code here:
    }//GEN-LAST:event_jButtonExcluirActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        carregaTabela();
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmCadastrarProd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmCadastrarProd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmCadastrarProd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmCadastrarProd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmCadastrarProd().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable JTableProdutos;
    private javax.swing.JButton jButtonCadastrar;
    private javax.swing.JButton jButtonEditar;
    private javax.swing.JButton jButtonExcluir;
    private javax.swing.JButton jButtonExcluir1;
    private javax.swing.JButton jButtonListar;
    private javax.swing.JComboBox<String> jComboCategoria;
    private javax.swing.JComboBox<String> jComboUnidade;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextId;
    private javax.swing.JTextField jTextNome;
    private javax.swing.JTextField jTextPreco;
    private javax.swing.JTextField jTextQuantidade;
    private javax.swing.JTextField jTextQuantidade_max;
    private javax.swing.JTextField jTextQuantidade_min;
    // End of variables declaration//GEN-END:variables
}
